{"version":3,"sources":["reducers/logReducer.js","context/UserContext.js","components/Join.js","reducers/reducerMessages.js","components/Messages.js","reducers/listUserReducer.js","components/SideBar.js","components/Chat.js","App.js","serviceWorker.js","index.js"],"names":["logReducer","state","action","type","online","username","room","logout","data","UserContext","createContext","UserProvider","props","useReducer","users","dispatchUser","console","log","useEffect","JSON","parse","sessionStorage","getItem","setItem","stringify","Provider","value","children","Join","useContext","useState","setUsername","setRoom","history","useHistory","className","onSubmit","e","preventDefault","trim","push","onChange","target","placeholder","required","autoComplete","reducerMessages","id","message","text","createdAt","position","url","Messages","href","listUserReducer","user","SideBar","icon","faCircle","Chat","listUser","dispatchList","activate","setActivate","messages","dispatch","socketRef","useRef","btnPosition","document","querySelector","current","io","emit","error","window","alert","on","scrollDown","disconnect","box","scrollTop","scrollHeight","faBars","size","onClick","map","m","key","getElementById","reset","name","navigator","geolocation","setAttribute","getCurrentPosition","varPosition","coords","latitude","longitude","removeAttribute","faSignOutAlt","removeItem","length","l","App","path","exact","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.66fd7a4a.chunk.js","sourcesContent":["const logReducer = (state, action) => {\r\n    switch(action.type){\r\n        case 'ADD_USER':\r\n            return{\r\n                    online: action.online,\r\n                    username: action.username,\r\n                    room: action.room\r\n                }\r\n        case 'LOGOUT_USER':\r\n            return action.logout\r\n        case 'SAVING_USERS':\r\n            return action.data\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n\r\nexport { logReducer as default }","import React, { createContext, useReducer, useEffect } from 'react';\r\nimport logReducer from '../reducers/logReducer';\r\n\r\nexport const UserContext = createContext();\r\n\r\nexport const UserProvider = (props) => {\r\n\r\n    const [users, dispatchUser] = useReducer(logReducer, {});\r\n\r\n    console.log(users)\r\n    \r\n    useEffect(() => {\r\n        const data = JSON.parse(sessionStorage.getItem('users'));\r\n        if(data){\r\n            dispatchUser({\r\n                type: 'SAVING_USERS',\r\n                data  \r\n            })\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        sessionStorage.setItem('users', JSON.stringify(users));\r\n    }, [users])\r\n\r\n    return(\r\n        <UserContext.Provider value={[users, dispatchUser]}>\r\n            {props.children}\r\n        </UserContext.Provider>\r\n    )\r\n}","import React, { useState, useContext, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { UserContext } from '../context/UserContext';\r\n\r\nconst Join = (props) => {\r\n    const [users, dispatchUser] = useContext(UserContext);\r\n    const [username, setUsername] = useState('');\r\n    const [room, setRoom] = useState('');\r\n\r\n    const history = useHistory();\r\n\r\n    const setUsers = (e) => {\r\n        e.preventDefault();\r\n        if(username && room){\r\n            dispatchUser({\r\n                type: 'ADD_USER',\r\n                online: true,\r\n                username: username.trim(), \r\n                room: room.trim()\r\n            })\r\n            history.push('/chat')\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"container-join\">\r\n            <div className=\"container-form\">\r\n                <h1>Join</h1>\r\n                <form onSubmit={setUsers} className=\"join\">\r\n                    <div>\r\n                        <input type=\"text\" className=\"input-join\" value={username || ''} onChange={(e) => setUsername(e.target.value)} placeholder=\"username\" required autoComplete=\"off\"/><br />\r\n                        <input type=\"text\" className=\"input-join\" value={room || ''} onChange={(e) => setRoom(e.target.value)} placeholder=\"room\" required autoComplete=\"off\"/><br />\r\n                    </div>\r\n                    <div>\r\n                        <button className=\"join-button\">Join Chat</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport { Join as default }","const reducerMessages = (state, action) => {\r\n    switch(action.type){\r\n        case 'ADD_MESSAGE':\r\n            return[\r\n                ...state,\r\n                {\r\n                    id: action.id,\r\n                    username: action.username,\r\n                    message: action.text,\r\n                    createdAt: action.createdAt\r\n                }\r\n            ]\r\n        case 'ADD_LOCATION':\r\n            return[\r\n                ...state,\r\n                {\r\n                    id: action.id,\r\n                    username: action.username,\r\n                    position: action.url,\r\n                    createdAt: action.createdAt\r\n                }\r\n            ]\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport { reducerMessages as default }","import React from 'react'\r\n\r\nconst Messages = (props) => {\r\n    \r\n    const username = JSON.parse(sessionStorage.getItem('users')).username\r\n\r\n    return(\r\n        <div className={props.text.username === username ? 'profile-message' : 'other-message'}>\r\n            <div className=\"container-message\">\r\n                <h3 className=\"msg-username\">{props.text.username}</h3>\r\n                {\r\n                    props.text.message ? <h3 className=\"msg-message\">{props.text.message}</h3> : <a href={props.text.position} target=\"_blank\" className=\"msg-position\">Position</a>\r\n                }\r\n                <h4 className=\"msg-time\">{props.text.createdAt}</h4>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport { Messages as default }","const listUserReducer = (state, action) => {\r\n    switch(action.type){\r\n        case 'ADD_LIST':\r\n            return action.user\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport { listUserReducer as default }","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCircle } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst SideBar = (props) => {\r\n    return(\r\n        <div>\r\n            <div className=\"container-user\">\r\n                <h3 className=\"single-user\">{props.text.username} <FontAwesomeIcon icon={faCircle} className={props.text.online === true ? \"online\" : \"offline\"} /></h3>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport { SideBar as default }","import React, { useReducer, useEffect, useRef, useContext, useState } from 'react';\r\nimport io from 'socket.io-client';\r\nimport reducerMessages from '../reducers/reducerMessages';\r\nimport Messages from './Messages';\r\nimport { UserContext } from '../context/UserContext';\r\nimport listUserReducer from '../reducers/listUserReducer';\r\nimport SideBar from '../components/SideBar';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faBars, faSignOutAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst Chat = () => {\r\n\r\n    const [users, dispatchUser] = useContext(UserContext);\r\n\r\n    const [listUser, dispatchList] = useReducer(listUserReducer, []);\r\n\r\n    const { online, username, room } = users\r\n\r\n    const [activate, setActivate] = useState(false);\r\n\r\n    const [messages, dispatch] = useReducer(reducerMessages, []);\r\n\r\n    const history = useHistory();\r\n\r\n    const socketRef = useRef();\r\n\r\n    const ENDPOINT = 'http://localhost:5000';\r\n\r\n    const btnPosition = document.querySelector('#position');\r\n\r\n    useEffect(() => {\r\n        socketRef.current = io(ENDPOINT);\r\n\r\n        socketRef.current.emit('join', ({online, username, room}), (error) => {\r\n            if(error){\r\n                window.alert('cannot log in');\r\n                history.push('/');\r\n            }\r\n        })\r\n\r\n        socketRef.current.on('roomData', ({room, user}) => {\r\n            dispatchList({\r\n                type: 'ADD_LIST',\r\n                user\r\n            })\r\n        })\r\n\r\n        socketRef.current.on('message', ({id, username, text, createdAt}) => {\r\n            if(username){\r\n                dispatch({\r\n                    type: 'ADD_MESSAGE',\r\n                    id,\r\n                    username,\r\n                    text,\r\n                    createdAt\r\n                })\r\n                scrollDown();\r\n            }\r\n        })\r\n\r\n        socketRef.current.on('locationMessages', ({id, username, url, createdAt}) => {\r\n            if(username){\r\n                dispatch({\r\n                    type: 'ADD_LOCATION',\r\n                    id,\r\n                    username,\r\n                    url,\r\n                    createdAt\r\n                })\r\n                scrollDown();\r\n            }\r\n        })\r\n\r\n        return () => {\r\n            socketRef.current.disconnect();\r\n        }\r\n\r\n    }, [])\r\n\r\n    const scrollDown = () => {\r\n        const box = document.querySelector('.messages');\r\n        box.scrollTop = box.scrollHeight;\r\n    }\r\n\r\n    const submitMessage = (e) => {\r\n        e.preventDefault();\r\n        const message = document.getElementById('msg').value.trim();\r\n        socketRef.current.emit('chat-message', message)\r\n        document.querySelector('#form').reset();\r\n    }\r\n\r\n    const getPosition = () => {\r\n        if(!navigator.geolocation){\r\n            return{\r\n                error: 'browser is not compatible'\r\n            }\r\n        }\r\n        btnPosition.setAttribute('disabled', 'disabled')\r\n        navigator.geolocation.getCurrentPosition(position => {\r\n            const varPosition = `https://google.com/maps?p=${position.coords.latitude},${position.coords.longitude}`;\r\n            socketRef.current.emit('position', varPosition, () => {\r\n                btnPosition.removeAttribute('disabled')\r\n                console.log('position sent')\r\n            })\r\n        })\r\n    }\r\n\r\n    return(\r\n        <div className=\"container-chat\">\r\n            <div className=\"container-module\">\r\n                <div className=\"sub-container-module\">\r\n                    <div className=\"header-module\">\r\n                        <h1 className=\"title-mddule\">Chat</h1>\r\n                        <FontAwesomeIcon icon={faBars} size=\"2x\" className=\"hamburger-module\" onClick={() => setActivate(!activate)}/>\r\n                    </div>\r\n                    <div className=\"messages\">\r\n                        {\r\n                            messages.map((m) =>(\r\n                                <Messages \r\n                                    key={m.id}\r\n                                    text={m}\r\n                                />\r\n                            ))\r\n                        }  \r\n                    </div>\r\n                    <div className=\"form-message\">\r\n                        <form onSubmit={submitMessage} id=\"form\">\r\n                            <div className=\"form-textarea\">\r\n                                <textarea name=\"message\" id=\"msg\" placeholder=\"Send message...\" autoComplete=\"off\"/>\r\n                            </div>\r\n                            <div>\r\n                                <button className=\"form-button\" id=\"message\">Send message</button>\r\n                                <button className=\"form-button\" id=\"position\" onClick={getPosition}>Send position</button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"container-list\" id={activate === true ? 'visible' : ''}>\r\n                <div className=\"header-list\">\r\n                    <h3 className=\"list-title\">Chat information</h3>\r\n                    <h3 className=\"close-window\" onClick={() => setActivate(!activate)}>X</h3>\r\n                </div>\r\n                <div className=\"list\">\r\n                    <div className=\"list-details\">\r\n                        <h3 className=\"room\">Room: {room}</h3>\r\n                        <FontAwesomeIcon icon={faSignOutAlt} size=\"2x\" className=\"logoff\" onClick={() => {\r\n                            sessionStorage.removeItem('users')\r\n\r\n                            dispatchUser({\r\n                                type: 'LOGOUT_USER',\r\n                                logout: {}\r\n                            })\r\n\r\n                            console.log(users)\r\n\r\n                            history.push('/')\r\n                        }}/>\r\n                    </div>\r\n                    <h3 className=\"list-title\">List User <span>({listUser.length})</span></h3>\r\n                    <div className=\"list-users\">\r\n                        {\r\n                            listUser.map((l) => (\r\n                                <SideBar \r\n                                    key={l.id}\r\n                                    text={l}\r\n                                />\r\n                            ))\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport { Chat as default }","import React, { useContext } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Join from './components/Join';\nimport Chat from './components/Chat';\nimport './App.css';\nimport { UserProvider } from './context/UserContext';\n\nfunction App() {\n\n  return (\n   <UserProvider>\n      <div className=\"container\">\n        <Router>\n          <Switch>\n            <Route path=\"/\" exact component={Join}/>\n            <Route path=\"/chat\" exact component={Chat}/>\n          </Switch>\n        </Router>\n      </div>\n    </UserProvider>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}